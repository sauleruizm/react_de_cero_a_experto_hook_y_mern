{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,UACI,8CAEA,uBAAOO,KAAK,OACRC,MAAOT,EACPU,SAlBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,c,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAbO,kBAcZA,GAdY,4CAAH,sDCAPS,EAAc,SAAC,GAAsB,IAArBN,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAa,QAAQC,IAAIL,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAOjB,EAAMkB,IAAQR,IAC1B,4BAAKA,QCLJS,EAAU,SAAC,GAAmB,IAAhBrB,EAAe,EAAfA,SAGxB,ECJyB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACN1B,EAASC,GACJ0B,MAAM,SAAAC,GAGHH,EAAS,CAAEjB,KAAMoB,EAAML,SAAU,SAG1C,CAACtB,IAEGuB,EDbyBK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAChDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACd,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADEA,EAAIC,aEb1BkB,EAAe,WAG1B,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,wBAAQ8C,QAVM,WAEhB9C,GAAe,SAAAS,GAAI,4BAAQA,GAAR,CAAa,wBAQ9B,qBACA,6BAEIoC,EAAWrB,KAAI,SAACT,EAAUgC,GAAX,OACb,cAAC,EAAD,CAA2BhC,SAAaA,GAAxBA,YCZbiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.84097099.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');            \r\n        }\r\n        //console.log('submit echo');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add category</h2>\r\n            \r\n            <input type=\"text\" \r\n                value={inputValue} \r\n                onChange= { handleInputChange }/ >\r\n        </form>\r\n    )\r\n    \r\n}\r\n\r\nAddCategory.propTypes =  {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async (category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=u2D7ZGUlQOY927vTXdCx5Pf0ocCARCyz`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    // console.log(data);\r\n    console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n    console.log(id, title, url)\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src= { url } alt = { title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ( { category }) => {\r\n    \r\n\r\n   const { data:images, loading } = useFetchGifs( category );\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n             { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">            \r\n                {\r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                            key= { img.id } \r\n                            {... img } />\r\n                    ))\r\n                }        \r\n            </div>\r\n        </>\r\n    )\r\n\r\n    \r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                // console.log(imgs);\r\n                setstate({ data: imgs, loading : false}); \r\n                \r\n            });\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading: true};\r\n    \r\n}    ","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import PropTypes from 'prop-types';\n\nexport const GifExpertApp = () => {\n\n  // const categories = ['One Punch','Samurai X', 'Dragon Ball']\n  const [categories, setCategories] = useState(['One Punch']);\n\n  const handleAdd = () => {\n    // setCategories([...categories,'HunterX Hunter']);\n    setCategories( cats => [...cats,'Hunter X Hunter']);\n  };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories= { setCategories }/>\n      <hr/>\n      <button onClick={ handleAdd }>Agregar</button>\n      <ol>\n        {\n          categories.map((category, i) => \n            <GifGrid key= { category } category = { category }/>\n          )\n        }\n      </ol>\n    </>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}